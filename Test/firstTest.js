"use strict";
///<reference types="../FudgeCore/FudgeCore.js"/>
var ExampleSceneForest;
///<reference types="../FudgeCore/FudgeCore.js"/>
(function (ExampleSceneForest) {
    var ƒ = FudgeCore; // Alt + 159
    window.addEventListener("DOMContentLoaded", init);
    let node;
    let camera;
    let viewPort;
    function init() {
        ƒ.RenderManager.initialize();
        createForest();
        viewPort.draw();
        viewPort.showSceneGraph();
    }
    function createForest() {
        let forest = new ƒ.Node("Forest");
        let colorLeaves = new ƒ.Color(0.2, 0.6, 0.3, 1);
        let colorNeedles = new ƒ.Color(0.1, 0.5, 0.3, 1);
        let colorTreeTrunk = new ƒ.Color(0.5, 0.3, 0, 1);
        let colorMushroomCapBrown = new ƒ.Color(0.6, 0.4, 0, 1);
        let colorMushroomCapRed = new ƒ.Color(0.8, 0, 0, 1);
        let colorMushroomTrunk = new ƒ.Color(0.9, 0.8, 0.7, 1);
        let colorGround = new ƒ.Color(0.3, 0.6, 0.5, 1);
        let ground = createCompleteMeshNode("Ground", new ƒ.Material("Ground", ƒ.ShaderUniColor, new ƒ.CoatColored(colorGround)), new ƒ.MeshCube());
        let cmpGroundMesh = ground.getComponent(ƒ.ComponentMesh);
        cmpGroundMesh.pivot.scale(new ƒ.Vector3(6, 0.05, 6));
        node = ground;
        createViewport();
        let cmpCamera = camera.cmpTransform;
        cmpCamera.local.translateY(2);
        cmpCamera.local.rotateX(-10);
        let broadleafe = createBroadleaf("BreadLeaf", colorTreeTrunk, colorLeaves, new ƒ.Vector3(0, 0, 0), new ƒ.Vector3(0.2, 0.5, 0.2));
        node.appendChild(broadleafe);
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        let node = new ƒ.Node(_name);
        let cmpMesh = new ƒ.ComponentMesh(_mesh);
        let cmpMaterial = new ƒ.ComponentMaterial(_material);
        let cmpTransform = new ƒ.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function createViewport(_canvas = null) {
        if (!_canvas) {
            _canvas = document.createElement("canvas");
            _canvas.width = 1000;
            _canvas.height = 650;
            document.body.appendChild(_canvas);
        }
        viewPort = new ƒ.Viewport();
        camera = createCamera();
        viewPort.initialize("viewport", node, camera.getComponent(ƒ.ComponentCamera), _canvas);
    }
    function createCamera(_translation = new ƒ.Vector3(1, 1, 10), _lookAt = new ƒ.Vector3()) {
        let camera = new ƒ.Node("Camera");
        let cmpTransform = new ƒ.ComponentTransform();
        cmpTransform.local.translate(_translation);
        cmpTransform.local.lookAt(_lookAt);
        camera.addComponent(cmpTransform);
        let cmpCamera = new ƒ.ComponentCamera();
        cmpCamera.projectCentral(1, 45, ƒ.FIELD_OF_VIEW.DIAGONAL);
        camera.addComponent(cmpCamera);
        return camera;
    }
    function createBroadleaf(_name, _clrTrunk, _clrTop, _pos, _scale) {
        let tree = new ƒ.Node(_name);
        let treeTrunk = createCompleteMeshNode("TreeTrunk", new ƒ.Material("TreeTrunk", ƒ.ShaderUniColor, new ƒ.CoatColored(_clrTrunk)), new ƒ.MeshCube);
        let cmpMeshTrunk = treeTrunk.getComponent(ƒ.ComponentMesh);
        cmpMeshTrunk.pivot.scale(_scale);
        cmpMeshTrunk.pivot.translateY(_scale.y / 2);
        let treeTop = createCompleteMeshNode("TreeTop", new ƒ.Material("TreeTop", ƒ.ShaderUniColor, new ƒ.CoatColored(_clrTop)), new ƒ.MeshCube);
        let cmpMeshTreeTop = treeTop.getComponent(ƒ.ComponentMesh);
        cmpMeshTreeTop.pivot.scale(new ƒ.Vector3((_scale.x * 2), (_scale.y * 3), (_scale.z * 2)));
        cmpMeshTreeTop.pivot.translateY(_scale.y * 2);
        tree.appendChild(treeTop);
        tree.appendChild(treeTrunk);
        tree.addComponent(new ƒ.ComponentTransform);
        tree.cmpTransform.local.translate(_pos);
        // Warum hat Transform mit cmpTransform einen shortcut und z.B. ein Mesh nicht?
        // Maybe weil jeder Node ein Transform hat, aber nicht jeder ein Mesh?
        return tree;
    }
})(ExampleSceneForest || (ExampleSceneForest = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyc3RUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlyc3RUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpREFBaUQ7QUFDakQsSUFBVSxrQkFBa0IsQ0E4RzNCO0FBL0dELGlEQUFpRDtBQUNqRCxXQUFVLGtCQUFrQjtJQUN4QixJQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBTyxZQUFZO0lBQ3hDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRCxJQUFJLElBQVksQ0FBQztJQUNqQixJQUFJLE1BQWMsQ0FBQztJQUNuQixJQUFJLFFBQW9CLENBQUM7SUFHekIsU0FBUyxJQUFJO1FBQ1QsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM3QixZQUFZLEVBQUUsQ0FBQztRQUNmLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELFNBQVMsWUFBWTtRQUNqQixJQUFJLE1BQU0sR0FBVyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUMsSUFBSSxXQUFXLEdBQVksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksWUFBWSxHQUFZLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLGNBQWMsR0FBWSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxxQkFBcUIsR0FBWSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFD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QUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QywrRUFBK0U7UUFDL0Usc0VBQXNFO1FBRXRFLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7QUFFTCxDQUFDLEVBOUdTLGtCQUFrQixLQUFsQixrQkFBa0IsUUE4RzNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8vPHJlZmVyZW5jZSB0eXBlcz1cIi4uL0Z1ZGdlQ29yZS9GdWRnZUNvcmUuanNcIi8+XHJcbm5hbWVzcGFjZSBFeGFtcGxlU2NlbmVGb3Jlc3Qge1xyXG4gICAgaW1wb3J0IMaSID0gRnVkZ2VDb3JlOyAgICAgICAvLyBBbHQgKyAxNTlcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBpbml0KTtcclxuICAgIGxldCBub2RlOiDGki5Ob2RlO1xyXG4gICAgbGV0IGNhbWVyYTogxpIuTm9kZTtcclxuICAgIGxldCB2aWV3UG9ydDogxpIuVmlld3BvcnQ7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgxpIuUmVuZGVyTWFuYWdlci5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgY3JlYXRlRm9yZXN0KCk7XHJcbiAgICAgICAgdmlld1BvcnQuZHJhdygpO1xyXG4gICAgICAgIHZpZXdQb3J0LnNob3dTY2VuZUdyYXBoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9yZXN0KCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBmb3Jlc3Q6IMaSLk5vZGUgPSBuZXcgxpIuTm9kZShcIkZvcmVzdFwiKTtcclxuXHJcbiAgICAgICAgbGV0IGNvbG9yTGVhdmVzOiDGki5Db2xvciA9IG5ldyDGki5Db2xvcigwLjIsIDAuNiwgMC4zLCAxKTtcclxuICAgICAgICBsZXQgY29sb3JOZWVkbGVzOiDGki5Db2xvciA9IG5ldyDGki5Db2xvcigwLjEsIDAuNSwgMC4zLCAxKTtcclxuICAgICAgICBsZXQgY29sb3JUcmVlVHJ1bms6IMaSLkNvbG9yID0gbmV3IMaSLkNvbG9yKDAuNSwgMC4zLCAwLCAxKTtcclxuICAgICAgICBsZXQgY29sb3JNdXNocm9vbUNhcEJyb3duOiDGki5Db2xvciA9IG5ldyDGki5Db2xvcigwLjYsIDAuNCwgMCwgMSk7XHJcbiAgICAgICAgbGV0IGNvbG9yTXVzaHJvb21DYXBSZWQ6IMaSLkNvbG9yID0gbmV3IMaSLkNvbG9yKDAuOCwgMCwgMCwgMSk7XHJcbiAgICAgICAgbGV0IGNvbG9yTXVzaHJvb21UcnVuazogxpIuQ29sb3IgPSBuZXcgxpIuQ29sb3IoMC45LCAwLjgsIDAuNywgMSk7XHJcbiAgICAgICAgbGV0IGNvbG9yR3JvdW5kOiDGki5Db2xvciA9IG5ldyDGki5Db2xvcigwLjMsIDAuNiwgMC41LCAxKTtcclxuXHJcbiAgICAgICAgbGV0IGdyb3VuZDogxpIuTm9kZSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJHcm91bmRcIixcclxuICAgICAgICAgICAgbmV3IMaSLk1hdGVyaWFsKFwiR3JvdW5kXCIsIMaSLlNoYWRlclVuaUNvbG9yLCBuZXcgxpIuQ29hdENvbG9yZWQoY29sb3JHcm91bmQpKVxyXG4gICAgICAgICAgICAsIG5ldyDGki5NZXNoQ3ViZSgpKTtcclxuICAgICAgICBsZXQgY21wR3JvdW5kTWVzaDogxpIuQ29tcG9uZW50TWVzaCA9IGdyb3VuZC5nZXRDb21wb25lbnQoxpIuQ29tcG9uZW50TWVzaCk7XHJcblxyXG4gICAgICAgIGNtcEdyb3VuZE1lc2gucGl2b3Quc2NhbGUobmV3IMaSLlZlY3RvcjMoNiwgMC4wNSwgNikpO1xyXG5cclxuICAgICAgICBub2RlID0gZ3JvdW5kO1xyXG4gICAgICAgIGNyZWF0ZVZpZXdwb3J0KCk7XHJcblxyXG4gICAgICAgIGxldCBjbXBDYW1lcmE6IMaSLkNvbXBvbmVudFRyYW5zZm9ybSA9IGNhbWVyYS5jbXBUcmFuc2Zvcm07XHJcbiAgICAgICAgY21wQ2FtZXJhLmxvY2FsLnRyYW5zbGF0ZVkoMik7XHJcbiAgICAgICAgY21wQ2FtZXJhLmxvY2FsLnJvdGF0ZVgoLTEwKTtcclxuXHJcbiAgICAgICAgbGV0IGJyb2FkbGVhZmU6IMaSLk5vZGUgPSBjcmVhdGVCcm9hZGxlYWYoXCJCcmVhZExlYWZcIiwgY29sb3JUcmVlVHJ1bmssIGNvbG9yTGVhdmVzLCBuZXcgxpIuVmVjdG9yMygwLCAwLCAwKSwgbmV3IMaSLlZlY3RvcjMoMC4yLCAwLjUsIDAuMikpO1xyXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoYnJvYWRsZWFmZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShfbmFtZTogc3RyaW5nLCBfbWF0ZXJpYWw6IMaSLk1hdGVyaWFsLCBfbWVzaDogxpIuTWVzaCk6IMaSLk5vZGUge1xyXG4gICAgICAgIGxldCBub2RlOiDGki5Ob2RlID0gbmV3IMaSLk5vZGUoX25hbWUpO1xyXG5cclxuICAgICAgICBsZXQgY21wTWVzaDogxpIuQ29tcG9uZW50TWVzaCA9IG5ldyDGki5Db21wb25lbnRNZXNoKF9tZXNoKTtcclxuICAgICAgICBsZXQgY21wTWF0ZXJpYWw6IMaSLkNvbXBvbmVudE1hdGVyaWFsID0gbmV3IMaSLkNvbXBvbmVudE1hdGVyaWFsKF9tYXRlcmlhbCk7XHJcblxyXG4gICAgICAgIGxldCBjbXBUcmFuc2Zvcm06IMaSLkNvbXBvbmVudFRyYW5zZm9ybSA9IG5ldyDGki5Db21wb25lbnRUcmFuc2Zvcm0oKTtcclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBNZXNoKTtcclxuICAgICAgICBub2RlLmFkZENvbXBvbmVudChjbXBNYXRlcmlhbCk7XHJcbiAgICAgICAgbm9kZS5hZGRDb21wb25lbnQoY21wVHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlVmlld3BvcnQoX2NhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBudWxsKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFfY2FudmFzKSB7XHJcbiAgICAgICAgICAgIF9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgICAgICBfY2FudmFzLndpZHRoID0gMTAwMDtcclxuICAgICAgICAgICAgX2NhbnZhcy5oZWlnaHQgPSA2NTA7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX2NhbnZhcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZpZXdQb3J0ID0gbmV3IMaSLlZpZXdwb3J0KCk7XHJcbiAgICAgICAgY2FtZXJhID0gY3JlYXRlQ2FtZXJhKCk7XHJcbiAgICAgICAgdmlld1BvcnQuaW5pdGlhbGl6ZShcInZpZXdwb3J0XCIsIG5vZGUsIGNhbWVyYS5nZXRDb21wb25lbnQoxpIuQ29tcG9uZW50Q2FtZXJhKSwgX2NhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FtZXJhKF90cmFuc2xhdGlvbjogxpIuVmVjdG9yMyA9IG5ldyDGki5WZWN0b3IzKDEsIDEsIDEwKVxyXG4gICAgICAgICwgX2xvb2tBdDogxpIuVmVjdG9yMyA9IG5ldyDGki5WZWN0b3IzKCkpOiDGki5Ob2RlIHtcclxuICAgICAgICBsZXQgY2FtZXJhOiDGki5Ob2RlID0gbmV3IMaSLk5vZGUoXCJDYW1lcmFcIik7XHJcbiAgICAgICAgbGV0IGNtcFRyYW5zZm9ybTogxpIuQ29tcG9uZW50VHJhbnNmb3JtID0gbmV3IMaSLkNvbXBvbmVudFRyYW5zZm9ybSgpO1xyXG4gICAgICAgIGNtcFRyYW5zZm9ybS5sb2NhbC50cmFuc2xhdGUoX3RyYW5zbGF0aW9uKTtcclxuICAgICAgICBjbXBUcmFuc2Zvcm0ubG9jYWwubG9va0F0KF9sb29rQXQpO1xyXG4gICAgICAgIGNhbWVyYS5hZGRDb21wb25lbnQoY21wVHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgbGV0IGNtcENhbWVyYTogxpIuQ29tcG9uZW50Q2FtZXJhID0gbmV3IMaSLkNvbXBvbmVudENhbWVyYSgpO1xyXG4gICAgICAgIGNtcENhbWVyYS5wcm9qZWN0Q2VudHJhbCgxLCA0NSwgxpIuRklFTERfT0ZfVklFVy5ESUFHT05BTCk7XHJcbiAgICAgICAgY2FtZXJhLmFkZENvbXBvbmVudChjbXBDYW1lcmEpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2FtZXJhO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJyb2FkbGVhZihfbmFtZTogc3RyaW5nLCBfY2xyVHJ1bms6IMaSLkNvbG9yLCBfY2xyVG9wOiDGki5Db2xvciwgX3BvczogxpIuVmVjdG9yMywgX3NjYWxlOiDGki5WZWN0b3IzKTogxpIuTm9kZSB7XHJcbiAgICAgICAgbGV0IHRyZWU6IMaSLk5vZGUgPSBuZXcgxpIuTm9kZShfbmFtZSk7XHJcblxyXG4gICAgICAgIGxldCB0cmVlVHJ1bms6IMaSLk5vZGUgPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiVHJlZVRydW5rXCIsIG5ldyDGki5NYXRlcmlhbChcIlRyZWVUcnVua1wiLCDGki5TaGFkZXJVbmlDb2xvciwgbmV3IMaSLkNvYXRDb2xvcmVkKF9jbHJUcnVuaykpLCBuZXcgxpIuTWVzaEN1YmUpO1xyXG5cclxuICAgICAgICBsZXQgY21wTWVzaFRydW5rOiDGki5Db21wb25lbnRNZXNoID0gdHJlZVRydW5rLmdldENvbXBvbmVudCjGki5Db21wb25lbnRNZXNoKTtcclxuICAgICAgICBjbXBNZXNoVHJ1bmsucGl2b3Quc2NhbGUoX3NjYWxlKTtcclxuICAgICAgICBjbXBNZXNoVHJ1bmsucGl2b3QudHJhbnNsYXRlWShfc2NhbGUueSAvIDIpO1xyXG5cclxuICAgICAgICBsZXQgdHJlZVRvcDogxpIuTm9kZSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJUcmVlVG9wXCIsIG5ldyDGki5NYXRlcmlhbChcIlRyZWVUb3BcIiwgxpIuU2hhZGVyVW5pQ29sb3IsIG5ldyDGki5Db2F0Q29sb3JlZChfY2xyVG9wKSksIG5ldyDGki5NZXNoQ3ViZSk7XHJcblxyXG4gICAgICAgIGxldCBjbXBNZXNoVHJlZVRvcDogxpIuQ29tcG9uZW50TWVzaCA9IHRyZWVUb3AuZ2V0Q29tcG9uZW50KMaSLkNvbXBvbmVudE1lc2gpO1xyXG4gICAgICAgIGNtcE1lc2hUcmVlVG9wLnBpdm90LnNjYWxlKG5ldyDGki5WZWN0b3IzKChfc2NhbGUueCAqIDIpLCAoX3NjYWxlLnkgKiAzKSwgKF9zY2FsZS56ICogMikpKTtcclxuICAgICAgICBjbXBNZXNoVHJlZVRvcC5waXZvdC50cmFuc2xhdGVZKF9zY2FsZS55ICogMik7XHJcblxyXG4gICAgICAgIHRyZWUuYXBwZW5kQ2hpbGQodHJlZVRvcCk7XHJcbiAgICAgICAgdHJlZS5hcHBlbmRDaGlsZCh0cmVlVHJ1bmspO1xyXG4gICAgICAgIHRyZWUuYWRkQ29tcG9uZW50KG5ldyDGki5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gICAgICAgIHRyZWUuY21wVHJhbnNmb3JtLmxvY2FsLnRyYW5zbGF0ZShfcG9zKTtcclxuICAgICAgICAvLyBXYXJ1bSBoYXQgVHJhbnNmb3JtIG1pdCBjbXBUcmFuc2Zvcm0gZWluZW4gc2hvcnRjdXQgdW5kIHouQi4gZWluIE1lc2ggbmljaHQ/XHJcbiAgICAgICAgLy8gTWF5YmUgd2VpbCBqZWRlciBOb2RlIGVpbiBUcmFuc2Zvcm0gaGF0LCBhYmVyIG5pY2h0IGplZGVyIGVpbiBNZXNoP1xyXG5cclxuICAgICAgICByZXR1cm4gdHJlZTtcclxuICAgIH1cclxuXHJcbn0iXX0=